diff --git a/bazel/antlr.bzl b/bazel/antlr.bzl
index 8bef22f4..d37e11b1 100644
--- a/bazel/antlr.bzl
+++ b/bazel/antlr.bzl
@@ -42,13 +42,21 @@ def antlr_cc_library(name, src, package):
 def _antlr_library(ctx):
     output = ctx.actions.declare_directory(ctx.attr.name)
 
+    src_path = ctx.file.src.path
+
+    # Workaround for Antlr4 bug:
+    # https://github.com/antlr/antlr4/issues/3138
+    windows_constraint = ctx.attr._windows_constraint[platform_common.ConstraintValueInfo]
+    if ctx.target_platform_has_constraint(windows_constraint):
+        src_path = src_path.replace('/', '\\')
+
     antlr_args = ctx.actions.args()
     antlr_args.add("-Dlanguage=Cpp")
     antlr_args.add("-no-listener")
     antlr_args.add("-visitor")
     antlr_args.add("-o", output.path)
     antlr_args.add("-package", ctx.attr.package)
-    antlr_args.add(ctx.file.src)
+    antlr_args.add(src_path)
 
     # Strip ".g4" extension.
     basename = ctx.file.src.basename[:-3]
@@ -98,5 +106,6 @@ antlr_library = rule(
             cfg = "host",  # buildifier: disable=attr-cfg
             default = Label("//bazel:antlr4_tool"),
         ),
+        '_windows_constraint': attr.label(default = '@platforms//os:windows'),
     },
 )
diff --git a/eval/eval/container_access_step.cc b/eval/eval/container_access_step.cc
index 39c2507d..d7962a29 100644
--- a/eval/eval/container_access_step.cc
+++ b/eval/eval/container_access_step.cc
@@ -11,6 +11,8 @@
 #include "eval/public/cel_number.h"
 #include "eval/public/cel_value.h"
 #include "eval/public/unknown_attribute_set.h"
+#include "eval/public/structs/legacy_type_adapter.h"
+#include "eval/public/structs/legacy_type_info_apis.h"
 
 namespace google::api::expr::runtime {
 
@@ -34,6 +36,8 @@ class ContainerAccessStep : public ExpressionStepBase {
                        ExecutionFrame* frame) const;
   CelValue LookupInList(const CelList* cel_list, const CelValue& key,
                         ExecutionFrame* frame) const;
+  CelValue LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                           ExecutionFrame* frame) const;
 };
 
 inline CelValue ContainerAccessStep::LookupInMap(const CelMap* cel_map,
@@ -109,6 +113,26 @@ inline CelValue ContainerAccessStep::LookupInList(const CelList* cel_list,
                    CelValue::TypeName(key.type())));
 }
 
+CelValue ContainerAccessStep::LookupInMessage(const CelValue::MessageWrapper& msg, const CelValue& key,
+                                              ExecutionFrame* frame) const {
+  if (!key.IsString()) {
+    return CreateErrorValue(
+        frame->memory_manager(),
+        absl::StrCat("Field name error: expected string type, got ",
+                     CelValue::TypeName(key.type())));
+  }
+  const LegacyTypeAccessApis* accessor =
+      msg.legacy_type_info()->GetAccessApis(msg);
+  if (accessor == nullptr) {
+    return CreateNoSuchFieldError(frame->memory_manager());
+  }
+  auto result_or = accessor->GetField(key.StringOrDie().value(), msg, ProtoWrapperTypeOptions::kUnsetNull, frame->memory_manager());
+  if (!result_or.ok()) {
+    return CreateErrorValue(frame->memory_manager(), result_or.status());
+  }
+  return std::move(result_or).value();
+}
+
 ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
     ExecutionFrame* frame) const {
   auto input_args = frame->value_stack().GetSpan(kNumContainerAccessArguments);
@@ -158,6 +182,12 @@ ContainerAccessStep::ValueAttributePair ContainerAccessStep::PerformLookup(
       const CelList* cel_list = container.ListOrDie();
       return {LookupInList(cel_list, key, frame), trail};
     }
+    case CelValue::Type::kMessage: {
+      CelValue::MessageWrapper wrapper;
+      bool success = container.GetValue(&wrapper);
+      ABSL_ASSERT(success);
+      return {LookupInMessage(wrapper, key, frame), trail};
+    }
     default: {
       auto error =
           CreateErrorValue(frame->memory_manager(),
